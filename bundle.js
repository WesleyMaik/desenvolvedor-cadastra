/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => {
  // webpackBootstrap
  /******/ "use strict";
  /******/ var __webpack_modules__ = {
    /***/ "./src/ts/index.ts":
      /*!*************************!*\
  !*** ./src/ts/index.ts ***!
  \*************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        eval(
          '__webpack_require__.r(__webpack_exports__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst serverUrl = "https://my-json-server.typicode.com/wesleymaik/front-end-challenge-m3";\r\nconst get_product_url = `${serverUrl}/products`;\r\nfunction getProducts() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let data = [];\r\n        let error = null;\r\n        try {\r\n            const response = yield fetch(get_product_url, { method: "GET" });\r\n            if (!response.ok) {\r\n                throw new Error("Something went wrong.");\r\n            }\r\n            const result = (yield response.json());\r\n            const uniqueProducts = result.reduce((acc, cur) => {\r\n                return acc.some((obj) => obj.id === cur.id) ? acc : [...acc, cur];\r\n            }, []);\r\n            data = uniqueProducts;\r\n        }\r\n        catch (err) {\r\n            error = err;\r\n        }\r\n        return { data, error };\r\n    });\r\n}\r\n/**\r\n *\r\n * @param products Products list\r\n * @param key Property of Product\r\n * @returns A distict list of a product\'s property\r\n */\r\nfunction getArrayDistinct(products, key) {\r\n    return [...new Set(products === null || products === void 0 ? void 0 : products.map((product) => product[key]))];\r\n}\r\n/**\r\n *\r\n * @param products Products list\r\n * @returns A list of colors\r\n */\r\nfunction getColorsByProducts(products) {\r\n    const colors = getArrayDistinct(products, "color") || [];\r\n    return colors.sort();\r\n}\r\n/**\r\n *\r\n * @param products Products list\r\n * @returns A list of sizes\r\n */\r\nfunction getSizesByProducts(products) {\r\n    const sizes = [\r\n        ...new Set(products === null || products === void 0 ? void 0 : products.reduce((prev, cur) => {\r\n            return [...prev, ...cur.size];\r\n        }, [])),\r\n    ] || [];\r\n    const orderSizes = ["P", "M", "G", "GG", "U"];\r\n    return sizes.sort((a, b) => {\r\n        return orderSizes.indexOf(a) - orderSizes.indexOf(b);\r\n    });\r\n}\r\n/**\r\n *\r\n * @param products Products list\r\n * @returns A list of prices\r\n */\r\nfunction getPricesByProducts(products) {\r\n    const prices = getArrayDistinct(products, "price") || [];\r\n    return prices.sort((a, b) => {\r\n        return a - b;\r\n    });\r\n}\r\n/**\r\n *\r\n * @param products Products list\r\n * @returns A list of dates\r\n */\r\nfunction getDateByProducts(products) {\r\n    const dates = getArrayDistinct(products, "date") || [];\r\n    return dates.sort();\r\n}\r\n/**\r\n *\r\n * @param products Products list\r\n * @param sortBy Property to sort\r\n * @param orderBy Ascending or Descending\r\n * @returns Sorted products\r\n */\r\nfunction sortProductsBy(products, sortBy, orderBy) {\r\n    const sorted = Array.from(products).sort((a, b) => {\r\n        const key = sortBy;\r\n        if (a[key] < b[key]) {\r\n            return orderBy == "asc" ? -1 : 1;\r\n        }\r\n        if (a[key] > b[key]) {\r\n            return orderBy == "asc" ? 1 : -1;\r\n        }\r\n        return 0;\r\n    });\r\n    return sorted;\r\n}\r\n/**\r\n *\r\n * @param products  Products list\r\n * @param filterBy Property to filter\r\n * @returns Filtered products\r\n */\r\nfunction filterProductsBy(products, filterBy) {\r\n    let filtered = Array.from(products);\r\n    if (filterBy.color && filterBy.color.length) {\r\n        filtered = filtered.filter((product) => {\r\n            const colorStatement = filterBy.color.includes(product.color);\r\n            return colorStatement;\r\n        });\r\n    }\r\n    if (filterBy.size && filterBy.size.length) {\r\n        filtered = filtered.filter((product) => {\r\n            const sizeStatement = filterBy === null || filterBy === void 0 ? void 0 : filterBy.size.some((size) => product.size.includes(size));\r\n            return sizeStatement;\r\n        });\r\n    }\r\n    if (filterBy.price_range && filterBy.price_range.length) {\r\n        filtered = filtered.filter((product) => {\r\n            const priceStatement = product.price >= (filterBy === null || filterBy === void 0 ? void 0 : filterBy.price_range[0]) &&\r\n                product.price <= (filterBy === null || filterBy === void 0 ? void 0 : filterBy.price_range[1]);\r\n            return priceStatement;\r\n        });\r\n    }\r\n    return filtered;\r\n}\r\n/**\r\n *\r\n * @param colors Array of colors\r\n * @param target A selector of DOM\'s element\r\n */\r\nfunction createColorFilter(colors, target) {\r\n    const container = document.querySelector(target);\r\n    colors.forEach((color) => {\r\n        const element = `\r\n    <div id="color-${color}" class="color">\r\n      <label id="color_label-${color}" class="color_label">\r\n        <input type="checkbox" name="color[]" id="color-${color}" data-id="color" value="${color}" />\r\n        <span id="color_name-${color}" class="color_name">${color}</span>\r\n      </label>\r\n    </div>\r\n    `.trim();\r\n        container.innerHTML += element;\r\n    });\r\n    const clearFilterElement = `\r\n    <button \r\n      type="button" \r\n      title="Limpar filtro" \r\n      class="clear-button clear-color" \r\n      data-id="clear-color"\r\n    >Limpar filtro</button>\r\n  `;\r\n    container.innerHTML += clearFilterElement;\r\n}\r\n/**\r\n *\r\n * @param sizes Array of sizes\r\n * @param target A selector of DOM\'s element\r\n */\r\nfunction createSizeFilter(sizes, target) {\r\n    const container = document.querySelector(target);\r\n    sizes.forEach((size) => {\r\n        const element = `\r\n      <button \r\n        type="button" \r\n        title="${size}" \r\n        id="size-${size}" \r\n        class="size" \r\n        data-id="size"\r\n        data-active="false" \r\n        data-value="${size}"\r\n      >${size}</button>\r\n    `.trim();\r\n        container.innerHTML += element;\r\n    });\r\n    const clearFilterElement = `\r\n    <button \r\n      type="button" \r\n      title="Limpar filtro" \r\n      class="clear-button clear-size" \r\n      data-id="clear-size"\r\n    >Limpar filtro</button>\r\n  `;\r\n    container.innerHTML += clearFilterElement;\r\n}\r\n/**\r\n *\r\n * @param prices Array of prices\r\n * @param target A selector of DOM\'s element\r\n * @returns\r\n */\r\nfunction createPriceRangeFilter(prices, target) {\r\n    const container = document.querySelector(target);\r\n    if (prices.length < 2) {\r\n        return;\r\n    }\r\n    const minPrice = Math.min(...prices);\r\n    const midPrice = prices[Math.floor(prices.length / 2)];\r\n    const maxPrice = Math.max(...prices);\r\n    const priceRange = [0, minPrice, midPrice, maxPrice, Infinity];\r\n    priceRange.forEach((price, index) => {\r\n        if (index == priceRange.length - 1) {\r\n            return;\r\n        }\r\n        const nextValue = priceRange[index + 1];\r\n        let priceText = `<span id="price_range-${index}" class="price_range">\r\n      de ${formatCurrency(price)} at√© ${formatCurrency(nextValue)}\r\n    </span>`;\r\n        if (index == priceRange.length - 2) {\r\n            priceText = `A partir de ${formatCurrency(maxPrice)}`;\r\n        }\r\n        const element = `\r\n      <div id="price-${index}" class="price">\r\n        <label id="price_label-${index}" class="price_label">\r\n          <input \r\n            type="radio" \r\n            name="price-range"\r\n            class="price-range"\r\n            data-id="prince-range"\r\n            id="price-range-${index}" \r\n            value="${price}"\r\n            data-min-value="${price}"\r\n            data-max-value="${nextValue}"\r\n          />\r\n          ${priceText}\r\n        </label>\r\n      </div>\r\n    `.trim();\r\n        container.innerHTML += element;\r\n    });\r\n    const clearFilterElement = `\r\n    <button \r\n      type="button" \r\n      title="Limpar filtro" \r\n      class="clear-button clear-price-range" \r\n      data-id="clear-price-range"\r\n    >Limpar filtro</button>\r\n  `;\r\n    container.innerHTML += clearFilterElement;\r\n}\r\n/**\r\n *\r\n * @param value A number value\r\n * @returns A number formatted for Brazilian currency\r\n */\r\nfunction formatCurrency(value) {\r\n    return value === null || value === void 0 ? void 0 : value.toLocaleString("pt-br", { style: "currency", currency: "BRL" });\r\n}\r\n/**\r\n *\r\n * @param products Products list\r\n */\r\nfunction createProductShelfs(products) {\r\n    var _a;\r\n    const container = document.querySelector("#products");\r\n    container.innerHTML = "";\r\n    if (!products.length) {\r\n        const container = document.querySelector("#products-container");\r\n        const emptyElement = `<p id="shelf-empty">N√£o h√° produtos no momento.</p>`;\r\n        container.innerHTML += emptyElement;\r\n        return;\r\n    }\r\n    (_a = document.querySelector("#shelf-empty")) === null || _a === void 0 ? void 0 : _a.remove();\r\n    products.forEach((product) => {\r\n        const { id, installment, image, name, price } = product;\r\n        const element = `\r\n      <a href="#" id="product-${id}" class="product">\r\n        <div id="image-container-${id}" class="image-container">\r\n          <img\r\n            class="product_image"\r\n            src=".${image}"\r\n            alt="${name || "Blusa"}"\r\n            width="190"\r\n            height="290"\r\n          />\r\n        </div>\r\n        <p id="product-name-${id}" class="product-name">${name}</p>\r\n        <p id="product-price-${id}" class="product-price">\r\n          ${formatCurrency(price)}\r\n        </p>\r\n        <p id="product-installment-${id}" class="product-installment">\r\n          At√© ${installment[0]}x de ${formatCurrency(price / installment[0])}\r\n        </p>\r\n        <button \r\n          type="button" \r\n          id="add-to-cart-${id}" \r\n          class="add-to-cart"\r\n          data-id="add-to-cart"\r\n          data-item-id="${id}"\r\n        >\r\n          Comprar\r\n        </button>\r\n      </a>\r\n    `.trim();\r\n        container.innerHTML += element;\r\n    });\r\n}\r\nfunction showErrorMessage() {\r\n    const container = document.querySelector("#products-container");\r\n    const element = `<p id="error" class="error">N√£o foi poss√≠vel exibir os produtos.</p>`;\r\n    container.innerHTML = element;\r\n}\r\n/**\r\n *\r\n * @param quantity number\r\n */\r\nfunction updateQuantityCart(quantity) {\r\n    const minicartQuantity = document.querySelector("#minicart-quantity");\r\n    minicartQuantity.innerText = String(quantity);\r\n}\r\nfunction createProductSummary(items) {\r\n    const container = document.querySelector("#minicart-items");\r\n    container.innerHTML = "";\r\n    items.forEach((item) => {\r\n        const { id, image, name, price } = item;\r\n        const element = `\r\n      <div id="item" class="item">\r\n        <img\r\n          src=".${image}"\r\n          alt="${name}"\r\n          id="item-image-${id}"\r\n          class="item-image"\r\n        />\r\n        <div id="item-info-${id}" class="item-info">\r\n          <p class="item-name">${name}</p>\r\n          <p class="item-price">${formatCurrency(price)}</p>\r\n          <button \r\n            type="button" \r\n            id="remove-item-${id}" \r\n            class="remove-item"\r\n            data-id="remove-item"\r\n            data-item-id="${id}"\r\n          >\r\n            Remover\r\n          </button>\r\n        </div>\r\n      </div>\r\n    `;\r\n        container.innerHTML += element;\r\n    });\r\n}\r\nfunction updateSubtotal(items) {\r\n    const subtotal = items.reduce((acc, cur) => {\r\n        return acc + cur.price * cur.quantity;\r\n    }, 0);\r\n    const minicartSubtotal = document.querySelector("#minicart-subtotal-value");\r\n    minicartSubtotal.innerText = formatCurrency(subtotal);\r\n}\r\n/**\r\n * Product constructor\r\n */\r\nclass ProductPage {\r\n    constructor(products = [], filters = {}, sorted = []) {\r\n        this.products = products;\r\n        this.filters = filters;\r\n        this.sorted = sorted;\r\n    }\r\n    setProducts(data) {\r\n        this.products = data;\r\n        if (!this.sorted.length) {\r\n            this.setSorted(data);\r\n        }\r\n        createProductShelfs(this.products);\r\n    }\r\n    getProducts() {\r\n        return this.products;\r\n    }\r\n    setSorted(data) {\r\n        this.sorted = data;\r\n        this.setProducts(data);\r\n    }\r\n    getSorted() {\r\n        this.sorted;\r\n    }\r\n    setFilters(data) {\r\n        this.filters = Object.assign(Object.assign({}, this.filters), data);\r\n        const filtered = filterProductsBy(this.sorted, this.filters);\r\n        this.setProducts(filtered);\r\n    }\r\n    getFilters() {\r\n        return this.filters;\r\n    }\r\n}\r\n/**\r\n * Minicart constructor\r\n */\r\nclass Minicart {\r\n    constructor(items = []) {\r\n        this.items = items;\r\n    }\r\n    setItems(items) {\r\n        this.items = items;\r\n        this.updateMinicart();\r\n    }\r\n    updateItem(index, property) {\r\n        const item = this.items[index];\r\n        if (!item) {\r\n            return;\r\n        }\r\n        this.items[index] = Object.assign(Object.assign({}, item), property);\r\n    }\r\n    getItems() {\r\n        return this.items;\r\n    }\r\n    addToCart(item) {\r\n        const id = item.id;\r\n        const items = this.getItems();\r\n        const index = this.items.findIndex((item) => item.id == id);\r\n        if (index != -1) {\r\n            const item = items[index];\r\n            items[index] = Object.assign(Object.assign({}, item), { quantity: item.quantity + 1 });\r\n            this.updateItem(index, { quantity: item.quantity + 1 });\r\n            return;\r\n        }\r\n        this.setItems([...items, item]);\r\n    }\r\n    removeFromCart(id) {\r\n        const items = this.getItems();\r\n        const itemIndex = items.findIndex((item) => item.id == id);\r\n        if (itemIndex == -1) {\r\n            return;\r\n        }\r\n        this.setItems(items.filter((_, index) => index != itemIndex));\r\n    }\r\n    updateMinicart() {\r\n        const items = this.getItems();\r\n        const quantity = items.length;\r\n        updateQuantityCart(quantity);\r\n        createProductSummary(items);\r\n        updateSubtotal(items);\r\n    }\r\n}\r\nfunction main() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // Fetch products\r\n        const { data: products, error } = yield getProducts();\r\n        // Show error message\r\n        if (error) {\r\n            showErrorMessage();\r\n            return;\r\n        }\r\n        // Get product\'s properties\r\n        const colors = getColorsByProducts(products);\r\n        const sizes = getSizesByProducts(products);\r\n        const prices = getPricesByProducts(products);\r\n        // Create filters\r\n        createColorFilter(colors, "#color-options");\r\n        createSizeFilter(sizes, "#size-options");\r\n        createPriceRangeFilter(prices, "#price-options");\r\n        createColorFilter(colors, "#color-options-mobile");\r\n        createSizeFilter(sizes, "#size-options-mobile");\r\n        createPriceRangeFilter(prices, "#price-options-mobile");\r\n        const productPage = new ProductPage();\r\n        const cart = new Minicart();\r\n        // Initializing Shelfs\r\n        productPage.setProducts(products);\r\n        // OrderBy element\r\n        const orderBySelect = document.querySelector("#orderby__select");\r\n        const orderBySelectMobile = document.querySelector("#orderby__select-mobile");\r\n        // OrderBy event\r\n        [orderBySelect, orderBySelectMobile].forEach((select) => {\r\n            select.addEventListener("change", (event) => {\r\n                var _a;\r\n                const value = (_a = event.target) === null || _a === void 0 ? void 0 : _a.value;\r\n                let sortBy = undefined;\r\n                let orderBy = undefined;\r\n                switch (value) {\r\n                    case "newest":\r\n                        sortBy = "date";\r\n                        orderBy = "desc";\r\n                        break;\r\n                    case "price-asc":\r\n                        sortBy = "price";\r\n                        orderBy = "asc";\r\n                        break;\r\n                    case "price-desc":\r\n                        sortBy = "price";\r\n                        orderBy = "desc";\r\n                        break;\r\n                }\r\n                if (!value || !sortBy || !orderBy) {\r\n                    return;\r\n                }\r\n                const products = productPage.getProducts();\r\n                const sortedProducts = sortProductsBy(products, sortBy, orderBy);\r\n                productPage.setSorted(sortedProducts);\r\n            });\r\n        });\r\n        const clearColorButton = document.querySelector("button[data-id=\'clear-color\']");\r\n        const clearSizeButton = document.querySelector("button[data-id=\'clear-size\']");\r\n        const clearPricesButton = document.querySelector("button[data-id=\'clear-price-range\']");\r\n        // FilterBy color\r\n        const colorInputs = document.querySelectorAll("input[data-id=\'color\']");\r\n        // FilterBy color event\r\n        colorInputs.forEach((input) => {\r\n            input.addEventListener("change", function () {\r\n                const choosedColors = [...colorInputs]\r\n                    .filter((element) => element.checked)\r\n                    .map((element) => element.value);\r\n                clearColorButton.style.display = choosedColors.length ? "block" : "none";\r\n                productPage.setFilters({ color: choosedColors });\r\n            });\r\n        });\r\n        // FilterBy size\r\n        const sizeButtons = document.querySelectorAll("button[data-id=\'size\']");\r\n        // FilterBy size event\r\n        sizeButtons.forEach((button) => {\r\n            button.addEventListener("click", function () {\r\n                const isActive = button.dataset.active == "true";\r\n                button.dataset.active = isActive ? "false" : "true";\r\n                button.dispatchEvent(new Event("change"));\r\n            });\r\n            button.addEventListener("change", function () {\r\n                const choosedSizes = [...sizeButtons]\r\n                    .filter((element) => element.dataset.active == "true")\r\n                    .map((element) => element.dataset.value);\r\n                clearSizeButton.style.display = choosedSizes.length ? "block" : "none";\r\n                productPage.setFilters({ size: choosedSizes });\r\n            });\r\n        });\r\n        // FilterBy price\r\n        const priceRadios = document.querySelectorAll("input[data-id=\'prince-range\']");\r\n        // FilterBy color event\r\n        priceRadios.forEach((radio) => {\r\n            radio.addEventListener("change", function () {\r\n                const minValue = Number(radio.dataset.minValue) || 0;\r\n                const maxValue = Number(radio.dataset.maxValue) || Infinity;\r\n                clearPricesButton.style.display = radio.checked ? "block" : "none";\r\n                productPage.setFilters({\r\n                    price_range: radio.checked ? [minValue, maxValue] : [],\r\n                });\r\n            });\r\n        });\r\n        // Clear filters events\r\n        clearColorButton.addEventListener("click", function () {\r\n            colorInputs.forEach((color) => {\r\n                color.checked = false;\r\n                color.dispatchEvent(new Event("change"));\r\n            });\r\n        });\r\n        clearSizeButton.addEventListener("click", function () {\r\n            sizeButtons.forEach((button) => {\r\n                button.dataset.active = "false";\r\n                button.dispatchEvent(new Event("change"));\r\n            });\r\n        });\r\n        clearPricesButton.addEventListener("click", function () {\r\n            priceRadios.forEach((radio) => {\r\n                radio.checked = false;\r\n                radio.dispatchEvent(new Event("change"));\r\n            });\r\n        });\r\n        // Minicart behaviours\r\n        const minicart = document.querySelector("#minicart");\r\n        const minicartButton = document.querySelector("#minicart-icon");\r\n        const closeMinicartButton = document.querySelector("button#close-minicart");\r\n        minicartButton.addEventListener("click", function () {\r\n            minicart.setAttribute("data-open", "true");\r\n        });\r\n        closeMinicartButton.addEventListener("click", function () {\r\n            minicart.removeAttribute("data-open");\r\n        });\r\n        // Add to Minicart event\r\n        const addToCartButtons = document.querySelectorAll("button[data-id=\'add-to-cart\']");\r\n        addToCartButtons.forEach((addToCartButton) => {\r\n            addToCartButton.addEventListener("click", function (event) {\r\n                event.preventDefault();\r\n                const itemId = addToCartButton.dataset.itemId;\r\n                const items = productPage.getProducts();\r\n                const item = items.find((item) => item.id == itemId);\r\n                if (!item) {\r\n                    return;\r\n                }\r\n                cart.addToCart(Object.assign(Object.assign({}, item), { quantity: 1 }));\r\n                minicart.dispatchEvent(new Event("addToCart"));\r\n                minicartButton.dispatchEvent(new Event("click"));\r\n            });\r\n        });\r\n        minicart.addEventListener("addToCart", function () {\r\n            const removeFromCartButtons = document.querySelectorAll("button[data-id=\'remove-item\']");\r\n            // Remove from cart event\r\n            removeFromCartButtons.forEach((button) => {\r\n                // button.removeEventListener("click", function () {});\r\n                button.addEventListener("click", function () {\r\n                    const itemId = button.dataset.itemId;\r\n                    cart.removeFromCart(itemId);\r\n                });\r\n            });\r\n        });\r\n        // Mobile Actions\r\n        const mobileFilter = document.querySelector("#filter-mobile");\r\n        const mobileFilterButton = document.querySelector("button#filter-mobile-button");\r\n        const mobileApplyFilterButton = document.querySelector("#apply-filter");\r\n        const mobileClearFilterButton = document.querySelector("#clear-filter");\r\n        mobileFilterButton.addEventListener("click", function () {\r\n            mobileFilter.setAttribute("data-open", "true");\r\n        });\r\n        mobileApplyFilterButton.addEventListener("click", function () {\r\n            mobileFilter.removeAttribute("data-open");\r\n        });\r\n        mobileClearFilterButton.addEventListener("click", function () {\r\n            [clearColorButton, clearSizeButton, clearPricesButton].forEach((button) => {\r\n                button.dispatchEvent(new Event("click"));\r\n            });\r\n            mobileFilter.removeAttribute("data-open");\r\n        });\r\n    });\r\n}\r\ndocument.addEventListener("DOMContentLoaded", main);\r\n\r\n\n\n//# sourceURL=webpack://desenvolvedor-m3/./src/ts/index.ts?'
        );

        /***/
      },

    /******/
  };
  /************************************************************************/
  /******/ // The require scope
  /******/ var __webpack_require__ = {};
  /******/
  /************************************************************************/
  /******/ /* webpack/runtime/make namespace object */
  /******/ (() => {
    /******/ // define __esModule on exports
    /******/ __webpack_require__.r = (exports) => {
      /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        /******/ Object.defineProperty(exports, Symbol.toStringTag, {
          value: "Module",
        });
        /******/
      }
      /******/ Object.defineProperty(exports, "__esModule", { value: true });
      /******/
    };
    /******/
  })();
  /******/
  /************************************************************************/
  /******/
  /******/ // startup
  /******/ // Load entry module and return exports
  /******/ // This entry module can't be inlined because the eval devtool is used.
  /******/ var __webpack_exports__ = {};
  /******/ __webpack_modules__["./src/ts/index.ts"](
    0,
    __webpack_exports__,
    __webpack_require__
  );
  /******/
  /******/
})();
