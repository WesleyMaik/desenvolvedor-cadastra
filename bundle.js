/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/index.ts":
/*!*************************!*\
  !*** ./src/ts/index.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst serverUrl =  false\r\n    ? 0\r\n    : \"https://my-json-server.typicode.com/wesleymaik/desenvolvedor-cadastra\";\r\nconst get_product_url = `${serverUrl}/products`;\r\nfunction getProducts() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let data = [];\r\n        let error = null;\r\n        try {\r\n            const response = yield fetch(get_product_url, { method: \"GET\" });\r\n            if (!response.ok) {\r\n                throw new Error(\"Something went wrong.\");\r\n            }\r\n            const result = ((yield response.json()) || []);\r\n            data = result;\r\n        }\r\n        catch (err) {\r\n            error = err;\r\n        }\r\n        return { data, error };\r\n    });\r\n}\r\n/**\r\n *\r\n * @param products Products list\r\n * @param key Property of Product\r\n * @returns A distict list of a product's property\r\n */\r\nfunction getArrayDistinct(products, key) {\r\n    return [...new Set(products === null || products === void 0 ? void 0 : products.map((product) => product[key]))];\r\n}\r\n/**\r\n *\r\n * @param products Products list\r\n * @returns A list of colors\r\n */\r\nfunction getColorsByProducts(products) {\r\n    const colors = getArrayDistinct(products, \"color\") || [];\r\n    return colors.sort();\r\n}\r\n/**\r\n *\r\n * @param products Products list\r\n * @returns A list of sizes\r\n */\r\nfunction getSizesByProducts(products) {\r\n    const sizes = [\r\n        ...new Set(products === null || products === void 0 ? void 0 : products.reduce((prev, cur) => {\r\n            return [...prev, ...cur.size];\r\n        }, [])),\r\n    ];\r\n    const orderSizes = [\"P\", \"M\", \"G\", \"GG\", \"U\"];\r\n    return sizes.sort((a, b) => {\r\n        return orderSizes.indexOf(a) - orderSizes.indexOf(b);\r\n    });\r\n}\r\n/**\r\n *\r\n * @param products Products list\r\n * @returns A list of prices\r\n */\r\nfunction getPricesByProducts(products) {\r\n    const prices = getArrayDistinct(products, \"price\") || [];\r\n    return prices.sort((a, b) => {\r\n        return a - b;\r\n    });\r\n}\r\n/**\r\n *\r\n * @param products Products list\r\n * @param sortBy Property to sort\r\n * @param orderBy Ascending or Descending\r\n * @returns Sorted products\r\n */\r\nfunction sortProductsBy(products, sortBy, orderBy) {\r\n    const sorted = Array.from(products).sort((a, b) => {\r\n        const key = sortBy;\r\n        if (a[key] < b[key]) {\r\n            return orderBy == \"asc\" ? -1 : 1;\r\n        }\r\n        if (a[key] > b[key]) {\r\n            return orderBy == \"asc\" ? 1 : -1;\r\n        }\r\n        return 0;\r\n    });\r\n    return sorted;\r\n}\r\n/**\r\n *\r\n * @param products  Products list\r\n * @param filterBy Property to filter\r\n * @returns Filtered products\r\n */\r\nfunction filterProductsBy(products, filterBy) {\r\n    let filtered = Array.from(products);\r\n    if (filterBy.color && filterBy.color.length) {\r\n        filtered = filtered.filter((product) => {\r\n            var _a;\r\n            const colorStatement = (_a = filterBy.color) === null || _a === void 0 ? void 0 : _a.includes(product.color);\r\n            return colorStatement;\r\n        });\r\n    }\r\n    if (filterBy.size && filterBy.size.length) {\r\n        filtered = filtered.filter((product) => {\r\n            const sizeStatement = filterBy === null || filterBy === void 0 ? void 0 : filterBy.size.some((size) => { var _a; return (_a = (product.size || [])) === null || _a === void 0 ? void 0 : _a.includes(size); });\r\n            return sizeStatement;\r\n        });\r\n    }\r\n    if (filterBy.price_range && filterBy.price_range.length) {\r\n        filtered = filtered.filter((product) => {\r\n            const priceStatement = product.price >= (filterBy === null || filterBy === void 0 ? void 0 : filterBy.price_range[0]) &&\r\n                product.price <= (filterBy === null || filterBy === void 0 ? void 0 : filterBy.price_range[1]);\r\n            return priceStatement;\r\n        });\r\n    }\r\n    return filtered;\r\n}\r\n/**\r\n *\r\n * @param colors Array of colors\r\n * @param target A selector of DOM's element\r\n */\r\nfunction createColorFilter(colors, target) {\r\n    const container = document.querySelector(target);\r\n    colors.forEach((color) => {\r\n        const element = `\n    <div id=\"color-${color}\" class=\"color\">\n      <label id=\"color_label-${color}\" class=\"color_label\">\n        <input type=\"checkbox\" name=\"color[]\" id=\"color-${color}\" data-id=\"color\" value=\"${color}\" />\n        <span id=\"color_name-${color}\" class=\"color_name\">${color}</span>\n      </label>\n    </div>\n    `.trim();\r\n        container.innerHTML += element;\r\n    });\r\n    const clearFilterElement = `\n    <button \n      type=\"button\" \n      title=\"Limpar filtro\" \n      class=\"clear-button clear-color\" \n      data-id=\"clear-color\"\n    >Limpar filtro</button>\n  `;\r\n    container.innerHTML += clearFilterElement;\r\n}\r\n/**\r\n *\r\n * @param sizes Array of sizes\r\n * @param target A selector of DOM's element\r\n */\r\nfunction createSizeFilter(sizes, target) {\r\n    const container = document.querySelector(target);\r\n    sizes.forEach((size) => {\r\n        const element = `\n      <button \n        type=\"button\" \n        title=\"${size}\" \n        id=\"size-${size}\" \n        class=\"size\" \n        data-id=\"size\"\n        data-active=\"false\" \n        data-value=\"${size}\"\n      >${size}</button>\n    `.trim();\r\n        container.innerHTML += element;\r\n    });\r\n    const clearFilterElement = `\n    <button \n      type=\"button\" \n      title=\"Limpar filtro\" \n      class=\"clear-button clear-size\" \n      data-id=\"clear-size\"\n    >Limpar filtro</button>\n  `;\r\n    container.innerHTML += clearFilterElement;\r\n}\r\n/**\r\n *\r\n * @param prices Array of prices\r\n * @param target A selector of DOM's element\r\n * @returns\r\n */\r\nfunction createPriceRangeFilter(prices, target) {\r\n    const container = document.querySelector(target);\r\n    if (prices.length < 2) {\r\n        return;\r\n    }\r\n    const minPrice = Math.min(...prices);\r\n    const midPrice = prices[Math.floor(prices.length / 2)];\r\n    const maxPrice = Math.max(...prices);\r\n    const priceRange = [0, minPrice, midPrice, maxPrice, Infinity];\r\n    priceRange.forEach((price, index) => {\r\n        if (index == priceRange.length - 1) {\r\n            return;\r\n        }\r\n        const nextValue = priceRange[index + 1];\r\n        let priceText = `<span id=\"price_range-${index}\" class=\"price_range\">\n      de ${formatCurrency(price)} até ${formatCurrency(nextValue)}\n    </span>`;\r\n        if (index == priceRange.length - 2) {\r\n            priceText = `A partir de ${formatCurrency(maxPrice)}`;\r\n        }\r\n        const element = `\n      <div id=\"price-${index}\" class=\"price\">\n        <label id=\"price_label-${index}\" class=\"price_label\">\n          <input \n            type=\"radio\" \n            name=\"price-range\"\n            class=\"price-range\"\n            data-id=\"prince-range\"\n            id=\"price-range-${index}\" \n            value=\"${price}\"\n            data-min-value=\"${price}\"\n            data-max-value=\"${nextValue}\"\n          />\n          ${priceText}\n        </label>\n      </div>\n    `.trim();\r\n        container.innerHTML += element;\r\n    });\r\n    const clearFilterElement = `\n    <button \n      type=\"button\" \n      title=\"Limpar filtro\" \n      class=\"clear-button clear-price-range\" \n      data-id=\"clear-price-range\"\n    >Limpar filtro</button>\n  `;\r\n    container.innerHTML += clearFilterElement;\r\n}\r\n/**\r\n *\r\n * @param value A number value\r\n * @returns A number formatted for Brazilian currency\r\n */\r\nfunction formatCurrency(value) {\r\n    return value === null || value === void 0 ? void 0 : value.toLocaleString(\"pt-br\", { style: \"currency\", currency: \"BRL\" });\r\n}\r\nfunction showErrorMessage() {\r\n    const container = document.querySelector(\"#products-container\");\r\n    const element = `<p id=\"error\" class=\"error\">Não foi possível exibir os produtos.</p>`;\r\n    container.innerHTML = element;\r\n}\r\n/**\r\n *\r\n * @param quantity number\r\n */\r\nfunction updateQuantityCart(quantity) {\r\n    const minicartQuantity = document.querySelector(\"#minicart-quantity\");\r\n    minicartQuantity.innerText = String(quantity);\r\n}\r\nfunction createProductSummary(items) {\r\n    const container = document.querySelector(\"#minicart-items\");\r\n    container.innerHTML = \"\";\r\n    items.forEach((item) => {\r\n        const { id, image, name, price } = item;\r\n        const element = `\n      <div id=\"item\" class=\"item\">\n        <img\n          src=\".${image}\"\n          alt=\"${name}\"\n          id=\"item-image-${id}\"\n          class=\"item-image\"\n        />\n        <div id=\"item-info-${id}\" class=\"item-info\">\n          <p class=\"item-name\">${name}</p>\n          <p class=\"item-price\">${formatCurrency(price)}</p>\n          <button \n            type=\"button\" \n            id=\"remove-item-${id}\" \n            class=\"remove-item\"\n            data-id=\"remove-item\"\n            data-item-id=\"${id}\"\n          >\n            Remover\n          </button>\n        </div>\n      </div>\n    `;\r\n        container.innerHTML += element;\r\n    });\r\n}\r\nfunction updateSubtotal(items) {\r\n    const subtotal = items.reduce((acc, cur) => {\r\n        return acc + cur.price * cur.quantity;\r\n    }, 0);\r\n    const minicartSubtotal = document.querySelector(\"#minicart-subtotal-value\");\r\n    minicartSubtotal.innerText = formatCurrency(subtotal);\r\n}\r\n/**\r\n * Product constructor\r\n */\r\nclass ProductPage {\r\n    constructor(products = [], filters = {}, sorted = [], itemsToShow = 6) {\r\n        this.products = products;\r\n        this.filters = filters;\r\n        this.sorted = sorted;\r\n        this.itemsToShow = itemsToShow;\r\n    }\r\n    setProducts(data) {\r\n        this.products = data;\r\n        if (!this.sorted.length) {\r\n            this.setSorted(data);\r\n        }\r\n        this.createProductShelfs(this.products);\r\n    }\r\n    getProducts() {\r\n        return this.products;\r\n    }\r\n    setSorted(data) {\r\n        this.sorted = data;\r\n        this.setProducts(data);\r\n    }\r\n    setFilters(data) {\r\n        this.filters = Object.assign(Object.assign({}, this.filters), data);\r\n        const filtered = filterProductsBy(this.sorted, this.filters);\r\n        this.setProducts(filtered);\r\n    }\r\n    getFilters() {\r\n        return this.filters;\r\n    }\r\n    setItemsToShow(value) {\r\n        this.itemsToShow = value;\r\n        const products = this.products;\r\n        this.createProductShelfs(products);\r\n    }\r\n    showMoreItems() {\r\n        const itemsToShow = this.itemsToShow;\r\n        if (itemsToShow >= this.products.length) {\r\n            return;\r\n        }\r\n        this.setItemsToShow(itemsToShow + 6);\r\n    }\r\n    /**\r\n     *\r\n     * @param products Products list\r\n     */\r\n    createProductShelfs(products) {\r\n        var _a;\r\n        const container = document.querySelector(\"#products\");\r\n        container.innerHTML = \"\";\r\n        if (!products.length) {\r\n            const container = document.querySelector(\"#products-container\");\r\n            const emptyElement = `<p id=\"shelf-empty\">Não há produtos no momento.</p>`;\r\n            container.innerHTML += emptyElement;\r\n            return;\r\n        }\r\n        (_a = document.querySelector(\"#shelf-empty\")) === null || _a === void 0 ? void 0 : _a.remove();\r\n        const itemsToShow = this.itemsToShow;\r\n        const showMoreButton = document.querySelector(\"#show-more\");\r\n        if (itemsToShow >= products.length) {\r\n            showMoreButton.style.display = \"none\";\r\n        }\r\n        else {\r\n            showMoreButton.style.display = \"block\";\r\n        }\r\n        products.slice(0, itemsToShow).forEach((product) => {\r\n            const { id, installment, image, name, price } = product;\r\n            const element = `\n        <div id=\"product-${id}\" class=\"product\">\n          <div id=\"image-container-${id}\" class=\"image-container\">\n            <img\n              class=\"product_image\"\n              src=\".${image}\"\n              alt=\"${name || \"Blusa\"}\"\n              width=\"190\"\n              height=\"290\"\n            />\n          </div>\n          <p id=\"product-name-${id}\" class=\"product-name\">${name}</p>\n          <p id=\"product-price-${id}\" class=\"product-price\">\n            ${formatCurrency(price)}\n          </p>\n          <p id=\"product-installment-${id}\" class=\"product-installment\">\n            Até ${installment[0]}x de ${formatCurrency(price / installment[0])}\n          </p>\n          <button \n            type=\"button\" \n            id=\"add-to-cart-${id}\" \n            class=\"add-to-cart\"\n            data-id=\"add-to-cart\"\n            data-item-id=\"${id}\"\n          >\n            Comprar\n          </button>\n        </div>\n      `.trim();\r\n            container.innerHTML += element;\r\n        });\r\n    }\r\n}\r\n/**\r\n * Minicart constructor\r\n */\r\nclass Minicart {\r\n    constructor(items = []) {\r\n        this.items = items;\r\n    }\r\n    setItems(items) {\r\n        this.items = items;\r\n        this.updateMinicart();\r\n    }\r\n    updateItem(index, property) {\r\n        const item = this.items[index];\r\n        if (!item) {\r\n            return;\r\n        }\r\n        this.items[index] = Object.assign(Object.assign({}, item), property);\r\n    }\r\n    getItems() {\r\n        return this.items;\r\n    }\r\n    addToCart(item) {\r\n        const id = item.id;\r\n        const items = this.getItems();\r\n        const index = this.items.findIndex((item) => item.id == id);\r\n        if (index != -1) {\r\n            const item = items[index];\r\n            items[index] = Object.assign(Object.assign({}, item), { quantity: item.quantity + 1 });\r\n            this.updateItem(index, { quantity: item.quantity + 1 });\r\n            return;\r\n        }\r\n        this.setItems([...items, item]);\r\n    }\r\n    removeFromCart(id) {\r\n        const items = this.getItems();\r\n        const itemIndex = items.findIndex((item) => item.id == id);\r\n        if (itemIndex == -1) {\r\n            return;\r\n        }\r\n        this.setItems(items.filter((_, index) => index != itemIndex));\r\n    }\r\n    updateMinicart() {\r\n        const items = this.getItems();\r\n        const quantity = items.length;\r\n        updateQuantityCart(quantity);\r\n        createProductSummary(items);\r\n        updateSubtotal(items);\r\n    }\r\n}\r\nfunction main() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // Fetch products\r\n        const { data: products, error } = yield getProducts();\r\n        // Show error message\r\n        if (error) {\r\n            showErrorMessage();\r\n            return;\r\n        }\r\n        // Get product's properties\r\n        const colors = getColorsByProducts(products);\r\n        const sizes = getSizesByProducts(products);\r\n        const prices = getPricesByProducts(products);\r\n        // Create filters\r\n        createColorFilter(colors, \"#color-options\");\r\n        createSizeFilter(sizes, \"#size-options\");\r\n        createPriceRangeFilter(prices, \"#price-options\");\r\n        createColorFilter(colors, \"#color-options-mobile\");\r\n        createSizeFilter(sizes, \"#size-options-mobile\");\r\n        createPriceRangeFilter(prices, \"#price-options-mobile\");\r\n        const productPage = new ProductPage();\r\n        const cart = new Minicart();\r\n        // Initializing Shelfs\r\n        productPage.setProducts(products);\r\n        // OrderBy event\r\n        const select = document.querySelectorAll(\".select\");\r\n        const options = document.querySelectorAll(\".options button\");\r\n        select.forEach((select) => {\r\n            select.addEventListener(\"click\", function () {\r\n                this.classList.toggle(\"opened\");\r\n            });\r\n        });\r\n        options.forEach(function (option) {\r\n            const value = option.dataset.value;\r\n            const label = option.dataset.label;\r\n            option.addEventListener(\"click\", function () {\r\n                select.forEach((select) => {\r\n                    select.dataset.value = value;\r\n                    select.querySelector(\".selected .text\").innerText =\r\n                        label;\r\n                    select.dispatchEvent(new Event(\"change\"));\r\n                });\r\n            });\r\n        });\r\n        select.forEach((select) => {\r\n            select.addEventListener(\"change\", function () {\r\n                const value = this.dataset.value;\r\n                let sortBy = undefined;\r\n                let orderBy = undefined;\r\n                switch (value) {\r\n                    case \"newest\":\r\n                        sortBy = \"date\";\r\n                        orderBy = \"desc\";\r\n                        break;\r\n                    case \"price-asc\":\r\n                        sortBy = \"price\";\r\n                        orderBy = \"asc\";\r\n                        break;\r\n                    case \"price-desc\":\r\n                        sortBy = \"price\";\r\n                        orderBy = \"desc\";\r\n                        break;\r\n                }\r\n                if (!value || !sortBy || !orderBy) {\r\n                    return;\r\n                }\r\n                const products = productPage.getProducts();\r\n                const sortedProducts = sortProductsBy(products, sortBy, orderBy);\r\n                productPage.setSorted(sortedProducts);\r\n                addToCartEvent();\r\n            });\r\n        });\r\n        const clearColorButton = document.querySelector(\"button[data-id='clear-color']\");\r\n        const clearSizeButton = document.querySelector(\"button[data-id='clear-size']\");\r\n        const clearPricesButton = document.querySelector(\"button[data-id='clear-price-range']\");\r\n        // FilterBy color\r\n        const colorInputs = document.querySelectorAll(\"input[data-id='color']\");\r\n        // FilterBy color event\r\n        colorInputs.forEach((input) => {\r\n            input.addEventListener(\"change\", function () {\r\n                const choosedColors = [...colorInputs]\r\n                    .filter((element) => element.checked)\r\n                    .map((element) => element.value);\r\n                clearColorButton.style.display = choosedColors.length ? \"block\" : \"none\";\r\n                productPage.setFilters({ color: choosedColors });\r\n                addToCartEvent();\r\n            });\r\n        });\r\n        // FilterBy size\r\n        const sizeButtons = document.querySelectorAll(\"button[data-id='size']\");\r\n        // FilterBy size event\r\n        sizeButtons.forEach((button) => {\r\n            button.addEventListener(\"click\", function () {\r\n                const isActive = button.dataset.active == \"true\";\r\n                button.dataset.active = isActive ? \"false\" : \"true\";\r\n                button.dispatchEvent(new Event(\"change\"));\r\n            });\r\n            button.addEventListener(\"change\", function () {\r\n                const choosedSizes = [...sizeButtons]\r\n                    .filter((element) => element.dataset.active == \"true\")\r\n                    .map((element) => element.dataset.value);\r\n                clearSizeButton.style.display = choosedSizes.length ? \"block\" : \"none\";\r\n                productPage.setFilters({ size: choosedSizes });\r\n                addToCartEvent();\r\n            });\r\n        });\r\n        // FilterBy price\r\n        const priceRadios = document.querySelectorAll(\"input[data-id='prince-range']\");\r\n        // FilterBy color event\r\n        priceRadios.forEach((radio) => {\r\n            radio.addEventListener(\"change\", function () {\r\n                const minValue = Number(radio.dataset.minValue) || 0;\r\n                const maxValue = Number(radio.dataset.maxValue) || Infinity;\r\n                clearPricesButton.style.display = radio.checked ? \"block\" : \"none\";\r\n                productPage.setFilters({\r\n                    price_range: radio.checked ? [minValue, maxValue] : [],\r\n                });\r\n                addToCartEvent();\r\n            });\r\n        });\r\n        // Clear filters events\r\n        clearColorButton.addEventListener(\"click\", function () {\r\n            colorInputs.forEach((color) => {\r\n                color.checked = false;\r\n                color.dispatchEvent(new Event(\"change\"));\r\n            });\r\n        });\r\n        clearSizeButton.addEventListener(\"click\", function () {\r\n            sizeButtons.forEach((button) => {\r\n                button.dataset.active = \"false\";\r\n                button.dispatchEvent(new Event(\"change\"));\r\n            });\r\n        });\r\n        clearPricesButton.addEventListener(\"click\", function () {\r\n            priceRadios.forEach((radio) => {\r\n                radio.checked = false;\r\n                radio.dispatchEvent(new Event(\"change\"));\r\n            });\r\n        });\r\n        // Minicart behaviours\r\n        const minicart = document.querySelector(\"#minicart\");\r\n        const minicartButton = document.querySelector(\"#minicart-icon\");\r\n        const closeMinicartButton = document.querySelector(\"button#close-minicart\");\r\n        minicartButton.addEventListener(\"click\", function () {\r\n            minicart.setAttribute(\"data-open\", \"true\");\r\n        });\r\n        closeMinicartButton.addEventListener(\"click\", function () {\r\n            minicart.removeAttribute(\"data-open\");\r\n        });\r\n        // Add to Minicart event\r\n        function addToCartEvent() {\r\n            const addToCartButtons = document.querySelectorAll(\"button[data-id='add-to-cart']\");\r\n            function addToCart(event) {\r\n                event.preventDefault();\r\n                const itemId = this.dataset.itemId;\r\n                const items = productPage.getProducts();\r\n                const item = items.find((item) => item.id == itemId);\r\n                if (!item) {\r\n                    return;\r\n                }\r\n                cart.addToCart(Object.assign(Object.assign({}, item), { quantity: 1 }));\r\n                minicart.dispatchEvent(new Event(\"addToCart\"));\r\n                minicartButton.dispatchEvent(new Event(\"click\"));\r\n            }\r\n            addToCartButtons.forEach((addToCartButton) => {\r\n                addToCartButton.removeEventListener(\"click\", addToCart);\r\n                addToCartButton.addEventListener(\"click\", addToCart);\r\n            });\r\n        }\r\n        addToCartEvent();\r\n        function removeFromCart() {\r\n            const removeFromCartButtons = document.querySelectorAll(\"button[data-id='remove-item']\");\r\n            // Remove from cart event\r\n            removeFromCartButtons.forEach((button) => {\r\n                function removeItem() {\r\n                    const itemId = button.dataset.itemId;\r\n                    cart.removeFromCart(itemId);\r\n                    button.removeEventListener(\"click\", removeItem);\r\n                    removeFromCart();\r\n                }\r\n                button.addEventListener(\"click\", removeItem);\r\n            });\r\n        }\r\n        minicart.addEventListener(\"addToCart\", removeFromCart);\r\n        // Mobile Actions\r\n        const mobileFilter = document.querySelector(\"#filter-mobile\");\r\n        const mobileFilterButton = document.querySelector(\"button#filter-mobile-button\");\r\n        const mobileApplyFilterButton = document.querySelector(\"#apply-filter\");\r\n        const mobileClearFilterButton = document.querySelector(\"#clear-filter\");\r\n        mobileFilterButton.addEventListener(\"click\", function () {\r\n            mobileFilter.setAttribute(\"data-open\", \"true\");\r\n        });\r\n        mobileApplyFilterButton.addEventListener(\"click\", function () {\r\n            mobileFilter.removeAttribute(\"data-open\");\r\n        });\r\n        mobileClearFilterButton.addEventListener(\"click\", function () {\r\n            [clearColorButton, clearSizeButton, clearPricesButton].forEach((button) => {\r\n                button.dispatchEvent(new Event(\"click\"));\r\n            });\r\n            mobileFilter.removeAttribute(\"data-open\");\r\n        });\r\n        // Show more\r\n        const showMoreButton = document.querySelector(\"#show-more\");\r\n        if (products.length > 0) {\r\n            showMoreButton.style.display = \"block\";\r\n        }\r\n        showMoreButton.addEventListener(\"click\", function () {\r\n            productPage.showMoreItems();\r\n            addToCartEvent();\r\n        });\r\n    });\r\n}\r\ndocument.addEventListener(\"DOMContentLoaded\", main);\r\n\r\n\n\n//# sourceURL=webpack:///./src/ts/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/ts/index.ts"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;